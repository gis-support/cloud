version: "3.3"
services:
  nginx:
    restart: always
    container_name: ${CONTAINER_BASENAME}-nginx-prod
    build:
      context: ./
      dockerfile: ./docker/nginx/Dockerfile
    tty: true
    ports:
      - "${APP_PROD_API_PORT}:80"
    depends_on:
      - db
      - api
      - redis
    environment:
      - APP_PROD_HOST_URL
      - CONTAINER_BASENAME
      - APP_PROD_API_PORT
      - VUE_APP_PROD_HOST_URL=${APP_PROD_HOST_URL}
    command: bash -c "./prod_start.sh"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 5s
      timeout: 3s
      retries: 5
  db:
    restart: always
    container_name: ${CONTAINER_BASENAME}-db-prod
    build:
      context: ./
      dockerfile: ./docker/db/Dockerfile
    ports:
      - "${APP_PROD_DB_PORT}:5432"
    volumes:
      - ./docker/db/prod_postgres_data:/var/lib/postgresql
      - ./docker/db/prod_dumps:/dumps
    environment:
      - POSTGRES_DBNAME
      - POSTGRES_PASS
      - POSTGRES_USER
      - DEFAULT_COLLATION
      - DEFAULT_CTYPE
      - DEFAULT_ENCODING
      - DEFAULT_USER
      - DEFAULT_PASS
      - DEFAULT_GROUPS
      - DEFAULT_GROUP
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "docker", "-h", "localhost"]
      interval: 5s
      timeout: 3s
      retries: 5
  api:
    restart: always
    container_name: ${CONTAINER_BASENAME}-api-prod
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    command: bash -c "./prod_start.sh"
    volumes:
      - ./api/static/logo.png:/api/static/logo.png
    environment:
      - PYTHONUNBUFFERED
      - FLASK_APP
      - DEFAULT_GROUPS
      - DEFAULT_USER
      - DEFAULT_PASS
      - DEFAULT_GROUP
      - CONTAINER_BASENAME
      - APP_PROD_DB_PORT
      - APP_PROD_API_PORT
      - APP_PROD_HOST_URL
    depends_on:
      - db
      - redis
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "localhost:${APP_PROD_API_PORT}",
          "docker",
          "-h",
          "localhost",
        ]
      interval: 5s
      timeout: 3s
      retries: 5
  redis:
    restart: always
    container_name: ${CONTAINER_BASENAME}-redis-prod
    image: redis:5.0.6
    volumes:
      - ./docker/db/prod_redis_data:/data
